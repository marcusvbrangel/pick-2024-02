
---------------------------------------------------------------------------


https://www.sigstore.dev/

https://github.com/sigstore/cosign

https://github.com/sigstore/cosign/releases/latest

https://docs.sigstore.dev/quickstart/quickstart-cosign/

docs.sigstore.dev/system_config/installation

https://github.com/sigstore/cosign/releases/tag/v2.4.1



---------------------------------------------------------------------------



# Instação do binário...


curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"

sudo mv cosign-linux-amd64 /usr/local/bin/cosign

sudo chmod +x /usr/local/bin/cosign



---------------------------------------------------------------------------


# Comandos básicos...


cosign


    A tool for Container Signing, Verification and Storage in an OCI registry.

    Usage:
    cosign [command]


    Available Commands:

    attach                  Provides utilities for attaching artifacts to other artifacts in a registry
    attest                  Attest the supplied container image.
    attest-blob             Attest the supplied blob.
    clean                   Remove all signatures from an image.
    completion              Generate completion script
    copy                    Copy the supplied container image and signatures.
    dockerfile              Provides utilities for discovering images in and performing operations on Dockerfiles
    download                Provides utilities for downloading artifacts and attached artifacts in a registry
    env                     Prints Cosign environment variables
    generate                Generates (unsigned) signature payloads from the supplied container image.
    generate-key-pair       Generates a key-pair.
    help                    Help about any command
    import-key-pair         Imports a PEM-encoded RSA or EC private key.
    initialize              Initializes SigStore root to retrieve trusted certificate and key targets for verification.
    load                    Load a signed image on disk to a remote registry
    login                   Log in to a registry
    manifest                Provides utilities for discovering images in and performing operations on Kubernetes manifests
    public-key              Gets a public key from the key-pair.
    save                    Save the container image and associated signatures to disk at the specified directory.
    sign                    Sign the supplied container image.
    sign-blob               Sign the supplied blob, outputting the base64-encoded signature to stdout.
    tree                    Display supply chain security related artifacts for an image such as signatures, SBOMs and attestations
    triangulate             Outputs the located cosign image reference. This is the location where cosign stores the specified artifact type.
    upload                  Provides utilities for uploading artifacts to a registry
    verify                  Verify a signature on the supplied container image
    verify-attestation      Verify an attestation on the supplied container image
    verify-blob             Verify a signature on the supplied blob
    verify-blob-attestation Verify an attestation on the supplied blob
    version                 Prints the version

    Flags:
        -h, --help=false:
            help for cosign

        --output-file='':
            log output to a file

        -t, --timeout=3m0s:
            timeout for commands

        -d, --verbose=false:
            log debug output

    Additional help topics:
    cosign piv-tool                This cosign was not built with piv-tool support!
    cosign pkcs11-tool             This cosign was not built with pkcs11-tool support!

    Use "cosign [command] --help" for more information about a command.



---------------------------------------------------------------------------


# Criação da chave pública e privada...


cosign generate-key-pair

    Enter password for private key: 1234
    Enter password for private key again: 1234

    Private key written to cosign.key
    Public key written to cosign.pub


ls -lah

    -rw------- 1 wolf wolf  653 nov 20 21:11 cosign.key
    -rw-r--r-- 1 wolf wolf  178 nov 20 21:11 cosign.pub




---------------------------------------------------------------------------


# Gerando uma nova imagen com o usuário do dockerhub...


docker image build -t marcusvbrangel/dockerfile-chainguard-java:1.0 -f Dockerfile-chainguard-java .


docker image ls

    REPOSITORY                                  TAG             IMAGE ID       CREATED         SIZE
    marcusvbrangel/dockerfile-chainguard-java   1.0             d98bcf992326   46 hours ago    321MB





# Executando a imagem para verificar se está tudo ok...


docker container run --rm --name dockerfile-chainguard-java -p 8081:8081 marcusvbrangel/dockerfile-chainguard-java:1.0


    .   ____          _            __ _ _
    /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
    \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
    '  |____| .__|_| |_|_| |_\__, | / / / /
    =========|_|==============|___/=/_/_/_/

    :: Spring Boot ::                (v3.3.5)

    2024-11-21T00:28:45.160Z  INFO 1 --- [campaingn-service] [           main] c.marvin.campaign.CampaignApplication    : Starting CampaignApplication v0.0.1-SNAPSHOT using Java 23.0.1 with PID 1 (/app/app.jar started by java in /app)
    2024-11-21T00:28:45.165Z  INFO 1 --- [campaingn-service] [           main] c.marvin.campaign.CampaignApplication    : No active profile set, falling back to 1 default profile: "default"
    2024-11-21T00:28:48.071Z  INFO 1 --- [campaingn-service] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8081 (http)
    2024-11-21T00:28:48.105Z  INFO 1 --- [campaingn-service] [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2024-11-21T00:28:48.105Z  INFO 1 --- [campaingn-service] [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.31]
    2024-11-21T00:28:48.177Z  INFO 1 --- [campaingn-service] [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2024-11-21T00:28:48.179Z  INFO 1 --- [campaingn-service] [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2824 ms
    2024-11-21T00:28:50.143Z  INFO 1 --- [campaingn-service] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8081 (http) with context path '/'
    2024-11-21T00:28:50.191Z  INFO 1 --- [campaingn-service] [           main] c.marvin.campaign.CampaignApplication    : Started CampaignApplication in 5.68 seconds (process running for 6.466)



---------------------------------------------------------------------------



Signing Containers

https://docs.sigstore.dev/cosign/signing/signing_with_containers/



---------------------------------------------------------------------------



# Enviando a imagem para o dockerhub...


docker login

    Authenticating with existing credentials...
    WARNING! Your password will be stored unencrypted in /home/user/.docker/config.json.
    Configure a credential helper to remove this warning. See
    https://docs.docker.com/engine/reference/commandline/login/#credential-stores

    Login Succeeded



docker push marcusvbrangel/dockerfile-chainguard-java:1.0

    The push refers to repository [docker.io/marcusvbrangel/dockerfile-chainguard-java]
    87293f315fb8: Pushed 
    443eed833090: Pushed 
    46097f4daf32: Pushed 
    1.0: digest: sha256:59ba0347374a67d9230da32e6c992755cf4446fda4c1a5b7b38c03671979f45d size: 948



https://hub.docker.com/repository/docker/marcusvbrangel/dockerfile-chainguard-java/general



---------------------------------------------------------------------------



# Assinar a imagem...


cosign sign --key cosign.key marcusvbrangel/dockerfile-chainguard-java:1.0


    Enter password for private key: 1234

    WARNING: Image reference marcusvbrangel/dockerfile-chainguard-java:1.0 uses a tag, not a digest, to identify the image to sign.
        This can lead you to sign a different image than the intended one. Please use a
        digest (example.com/ubuntu@sha256:abc123...) rather than tag
        (example.com/ubuntu:latest) for the input to cosign. The ability to refer to
        images by tag will be removed in a future release.


            The sigstore service, hosted by sigstore a Series of LF Projects, LLC, is provided pursuant to the Hosted Project Tools Terms of Use, available at https://lfprojects.org/policies/hosted-project-tools-terms-of-use/.
            Note that if your submission includes personal data associated with this signed artifact, it will be part of an immutable record.
            This may include the email address associated with the account with which you authenticate your contractual Agreement.
            This information will be used for signing this artifact and will be stored in public transparency logs and cannot be removed later, and is subject to the Immutable Record notice at https://lfprojects.org/policies/hosted-project-tools-immutable-records/.

    By typing 'y', you attest that (1) you are not submitting the personal data of any other person; and (2) you understand and agree to the statement and the Agreement terms at the URLs listed above.
    Are you sure you would like to continue? [y/N] 

    tlog entry created with index: 150379417
    Pushing signature to: index.docker.io/marcusvbrangel/dockerfile-chainguard-java



---------------------------------------------------------------------------


# Verifica se a imagem está assinada...


cosign verify --key cosign.pub marcusvbrangel/dockerfile-chainguard-java:1.0


    Verification for index.docker.io/marcusvbrangel/dockerfile-chainguard-java:1.0 --
    The following checks were performed on each of these signatures:
    - The cosign claims were validated
    - Existence of the claims in the transparency log was verified offline
    - The signatures were verified against the specified public key

    [
        {"critical":
        {"identity":
        {"docker-reference":"index.docker.io/marcusvbrangel/dockerfile-chainguard-java"},
        "image":{"docker-manifest-digest":"sha256:59ba0347374a67d9230da32e6c992755cf4446fda4c1a5b7b38c03671979f45d"},
        "type":"cosign container image signature"},
        "optional":
        {"Bundle":
        {"SignedEntryTimestamp":"MEYCIQCd8OSwXU5EEqpNw7gM6aUaei6vDQvZ1meVWMIWXYglAAIhANDl2SE2rbIrGsc4W63q18u+o+s1qBELcWFOAnZHuaKv","Payload":{"body":"eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiaGFzaGVkcmVrb3JkIiwic3BlYyI6eyJkYXRhIjp7Imhhc2giOnsiYWxnb3JpdGhtIjoic2hhMjU2IiwidmFsdWUiOiI4ZDhkMGYwYzE4ZGEwMGMyMTIyNjdkNWFkN2Q5ZGVmZDhmYTg5MGI5MmU1ZDU3ZjM0MDZjYmJjMmM0MWQyNjk5In19LCJzaWduYXR1cmUiOnsiY29udGVudCI6Ik1FWUNJUUQwRjNzenNxVFA3cEQ1UHJIOFQvUk9jSTR1QVNFOUZieXhKOUNVYW8vTXpRSWhBSnozMGNIb3VlbmpCMzd5cUFCeEFCcXl3TVF3R2xMdUx2aWZvMGJWck9RUyIsInB1YmxpY0tleSI6eyJjb250ZW50IjoiTFMwdExTMUNSVWRKVGlCUVZVSk1TVU1nUzBWWkxTMHRMUzBLVFVacmQwVjNXVWhMYjFwSmVtb3dRMEZSV1VsTGIxcEplbW93UkVGUlkwUlJaMEZGY0hJcmJUYzVRV1JWUkRKMFluWjFXRGhVY2tkU1dFcEpVVkZXU3dwVGJFVjVUMkZqZDAxeEt5dHNXbTFWYldGQmNGaFdkM0E1ZHpReFowSXZUREJhZVRSR2NtcHZVR0Z2TXk5cWJVbERTMjFEU1ZkV1FrbG5QVDBLTFMwdExTMUZUa1FnVUZWQ1RFbERJRXRGV1MwdExTMHRDZz09In19fX0=","integratedTime":1732153258,"logIndex":150379417,"logID":"c0d23d6ad406973f9559f3ba2d1ca01f84147d8ffc5b8445c224f98b9591801d"}
        }}}
    ]





---------------------------------------------------------------------------




---------------------------------------------------------------------------



---------------------------------------------------------------------------




---------------------------------------------------------------------------




---------------------------------------------------------------------------




---------------------------------------------------------------------------




---------------------------------------------------------------------------


